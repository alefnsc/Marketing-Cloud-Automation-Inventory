{
    "appVersion": "252.0.22",
    "id": "2iqm6pplnd",
    "name": "Automation Inventory",
    "version": 1,
    "modelVersion": "6",
    "references": {
        "automations/6bfbaecf-44a4-4b3b-8d9c-f03b9a63df67": [
            {
                "identifier": "scriptActivities/65f17a11-7634-4183-b098-9160577c94ab",
                "relationship": "required"
            },
            {
                "identifier": "categories/454183",
                "relationship": "required"
            }
        ],
        "scriptActivities/65f17a11-7634-4183-b098-9160577c94ab": [
            {
                "identifier": "assets/1397379",
                "relationship": "required"
            },
            {
                "identifier": "categories/450781",
                "relationship": "required"
            }
        ],
        "categories/454183": [
            {
                "identifier": "categories/450779",
                "relationship": "required"
            }
        ],
        "assets/1397379": [
            {
                "identifier": "categories/450785",
                "relationship": "required"
            }
        ],
        "categories/450785": [],
        "dataExtensions/25137f26-5d0e-f011-b868-48df37deb2e3": [
            {
                "identifier": "categories/454182",
                "relationship": "required"
            }
        ],
        "dataExtensions/24137f26-5d0e-f011-b868-48df37deb2e3": [
            {
                "identifier": "categories/454182",
                "relationship": "required"
            }
        ],
        "categories/454182": [
            {
                "identifier": "categories/450767",
                "relationship": "required"
            }
        ],
        "categories/450767": [],
        "categories/450781": [],
        "categories/450779": []
    },
    "input": [],
    "config": {
        "preserveCategories": true,
        "storeImagesAsReferences": false
    },
    "entities": {
        "assets": {
            "1397379": {
                "issues": [],
                "originID": "1397379",
                 "originEID": "",
                "data": {
                    "assetType": {
                        "id": 220,
                        "name": "codesnippetblock"
                    },
                    "name": "CS_POLYFILL_HELPERS",
                    "category": {
                        "id": "{{mcpm#/entities/categories/450785/data/id}}"
                    },
                    "content": "<script runat=server>\n\n  Array.prototype.indexOf = function(val,startIndex) {\n    if(!startIndex) { startIndex = 0;}\n    for(i=startIndex;i<this.length;i++){\n       if (!ret && this[i] == val){ret = i}\n    }\n    if(!ret) { ret = -1 }\n    return ret;\n  }  \n  \nArray.isArray = function(arg) {\n   return Object.prototype.toString.call(arg) === '[object Array]';\n};\n  \nArray.prototype.splice = function(startIndex, numItems){\nvar array = this;\nvar endIndex = startIndex + numItems;var itemsBeforeSplice = []; // array till startIndex\nvar splicedItems = []; // removed items array\nvar itemsAfterSplice = []; // array from endIndex\n\nfor( var i = 0; i < array.length; i++ ){\n    if( i < startIndex ){ itemsBeforeSplice.push( array[i] ); } \n    if( i >= startIndex && i < endIndex ){ splicedItems.push( array[i] ); }\n    if( i >= endIndex ){ itemsAfterSplice.push( array[i] ); }      \n}\n\n// Insert all arguments/parameters after numItems\nfor(var i = 2;i < arguments.length; i++){\n  itemsBeforeSplice.push(arguments[i]);\n}\n\n// Combine before/after arrays\nvar remainingItems = itemsBeforeSplice.concat( itemsAfterSplice );\n\n// Rewrite array\nfor(var i = 0, len=Math.max( array.length, remainingItems.length ); i < len; i++ ){\n  if( remainingItems.length > i ){\n    array[i] = remainingItems[i];\n  } else {\n    array.pop();\n  }\n}\nreturn array;\n}\n  \nArray.prototype.filter = function(c) {\n  if (c && {}.toString.call(c) === '[object Function]') {\n    f = c;\n    var a = [];\n    for(i=0;i<this.length;i++) {\n      if (f(this[i]) == true) { a.push(this[i]) }\n    }\n    return a;\n  } else {\n     return {\"Error\": \"Filter provided is not a function\"};\n  }\n}\n</script>",
                    "fileProperties": {
                        "fileName": "CS_POLYFILL_HELPERS"
                    }
                }
            }
        },
        "attributeGroups": {},
        "attributeRelationships": {},
        "attributeSets": {},
        "automations": {
            "6bfbaecf-44a4-4b3b-8d9c-f03b9a63df67": {
                "issues": [],
                "originID": "6bfbaecf-44a4-4b3b-8d9c-f03b9a63df67",
                 "originEID": "",
                "data": {
                    "categoryId": "{{mcpm#/entities/categories/454183/data/id}}",
                    "description": "",
                    "name": "AUT_AUTOMATION_INVENTORY",
                    "steps": [
                        {
                            "activities": [
                                {
                                    "name": "{{mcpm#/entities/scriptActivities/65f17a11-7634-4183-b098-9160577c94ab/data/name}}",
                                    "activityObjectId": "{{mcpm#/entities/scriptActivities/65f17a11-7634-4183-b098-9160577c94ab/data/id}}",
                                    "objectTypeId": 423,
                                    "displayOrder": 0,
                                    "serializedObject": ""
                                }
                            ],
                            "annotation": "",
                            "name": ""
                        }
                    ],
                    "startSource": {
                        "typeId": 1
                    }
                }
            }
        },
        "categories": {
            "450767": {
                "issues": [],
                "originID": "450767",
                 "originEID": "",
                "data": {
                    "description": "",
                    "categoryType": "dataextension",
                    "parentId": 0,
                    "name": "Data Extensions",
                    "editable": 0,
                    "extendable": 1
                }
            },
            "450779": {
                "issues": [],
                "originID": "450779",
                 "originEID": "",
                "data": {
                    "description": "",
                    "categoryType": "AUTOMATIONS",
                    "parentId": 0,
                    "name": "my automations",
                    "editable": 0,
                    "extendable": 1
                }
            },
            "450781": {
                "issues": [],
                "originID": "",
                 "originEID": "",
                "data": {
                    "description": "",
                    "categoryType": "SSJSActivity",
                    "parentId": 0,
                    "name": "Scripts",
                    "editable": 0,
                    "extendable": 1
                }
            },
            "450785": {
                "issues": [],
                "originID": "450785",
                 "originEID": "",
                "data": {
                    "description": "The root folder for assets",
                    "categoryType": "asset",
                    "parentId": 0,
                    "name": "Content Builder",
                    "editable": 0,
                    "extendable": 1
                }
            },
            "454182": {
                "issues": [],
                "originID": "454182",
                 "originEID": "",
                "data": {
                    "description": "",
                    "categoryType": "dataextension",
                    "parentId": "{{mcpm#/entities/categories/450767/data/id}}",
                    "name": "Automation Inventory",
                    "editable": 1,
                    "extendable": 1
                }
            },
            "454183": {
                "issues": [],
                "originID": "454183",
                 "originEID": "",
                "data": {
                    "description": "",
                    "categoryType": "automations",
                    "parentId": "{{mcpm#/entities/categories/450779/data/id}}",
                    "name": "Automation Inventory",
                    "editable": 1,
                    "extendable": 1
                }
            }
        },
        "cloudPageCollections": {},
        "codeResources": {},
        "dataExtensions": {
            "25137f26-5d0e-f011-b868-48df37deb2e3": {
                "issues": [],
                "originID": "25137f26-5d0e-f011-b868-48df37deb2e3",
                 "originEID": "",
                "data": {
                    "categoryId": "{{mcpm#/entities/categories/454182/data/id}}",
                    "dataRetentionProperties": {
                        "isDeleteAtEndOfRetentionPeriod": false,
                        "isResetRetentionPeriodOnImport": false,
                        "isRowBasedRetention": false,
                        "rowBasedThreshold": 1000000000
                    },
                    "description": "",
                    "isFieldAdditionAllowed": true,
                    "isFieldModificationAllowed": true,
                    "isObjectDeletable": true,
                    "isSendable": false,
                    "isTestable": false,
                    "name": "DE_AUTOMATION_INVENTORY",
                    "fields": [
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": false,
                            "isPrimaryKey": true,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 36,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "DERowId",
                            "ordinal": 0,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "AutomationName",
                            "ordinal": 1,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "Status",
                            "ordinal": 2,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "CreatedDate",
                            "ordinal": 3,
                            "type": "Date"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ModifiedDate",
                            "ordinal": 4,
                            "type": "Date"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ScheduledTime",
                            "ordinal": 5,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ActivityName",
                            "ordinal": 6,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ActivityType",
                            "ordinal": 7,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ActivityInput",
                            "ordinal": 8,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "ActivityOutput",
                            "ordinal": 9,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "QueryText",
                            "ordinal": 10,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": true,
                            "isOverridable": true,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "BusinessUnit",
                            "ordinal": 11,
                            "type": "Text"
                        }
                    ]
                }
            },
            "24137f26-5d0e-f011-b868-48df37deb2e3": {
                "issues": [],
                "originID": "24137f26-5d0e-f011-b868-48df37deb2e3",
                 "originEID": "",
                "data": {
                    "categoryId": "{{mcpm#/entities/categories/454182/data/id}}",
                    "dataRetentionProperties": {
                        "isDeleteAtEndOfRetentionPeriod": false,
                        "isResetRetentionPeriodOnImport": false,
                        "isRowBasedRetention": false,
                        "rowBasedThreshold": 1000000000
                    },
                    "description": "",
                    "isFieldAdditionAllowed": true,
                    "isFieldModificationAllowed": true,
                    "isObjectDeletable": true,
                    "isSendable": false,
                    "isTestable": false,
                    "name": "DE_AUTOMATION_INVENTORY_ERROR_LOG",
                    "fields": [
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": false,
                            "isPrimaryKey": true,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 36,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "id",
                            "ordinal": 0,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": false,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 100,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "errorSource",
                            "ordinal": 1,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 2000,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "errorMessage",
                            "ordinal": 2,
                            "type": "Text"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 2000,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "errorDescription",
                            "ordinal": 3,
                            "type": "Text"
                        },
                        {
                            "defaultValue": "GetDate()",
                            "description": "",
                            "isHidden": false,
                            "isInheritable": false,
                            "isOverridable": false,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "errorDate",
                            "ordinal": 4,
                            "type": "Date"
                        },
                        {
                            "description": "",
                            "isHidden": false,
                            "isInheritable": true,
                            "isOverridable": true,
                            "isNullable": true,
                            "isPrimaryKey": false,
                            "isReadOnly": false,
                            "isTemplateField": false,
                            "length": 50,
                            "masktype": "None",
                            "mustOverride": false,
                            "name": "activityName",
                            "ordinal": 5,
                            "type": "Text"
                        }
                    ]
                }
            }
        },
        "dataExtractActivities": {},
        "dataFilterDefinitions": {},
        "dataFilters": {},
        "eventDefinitions": {},
        "fileTransferActivities": {},
        "importActivities": {},
        "journeys": {},
        "journeyTemplates": {},
        "landingPages": {},
        "microsites": {},
        "micrositePages": {},
        "micrositePageVersions": {},
        "primaryLandingPages": {},
        "queryActivities": {},
        "registeredCustomActivities": {},
        "scriptActivities": {
            "65f17a11-7634-4183-b098-9160577c94ab": {
                "issues": [],
                "originID": "65f17a11-7634-4183-b098-9160577c94ab",
                 "originEID": "",
                "data": {
                    "name": "SC_AUTOMATION_INVENTORY",
                    "script": "<script runat=\"server\">\n  \n  Platform.Load(\"Core\", \"1.1.1\");\n  \n  /* Import JS polyfill piece of code to provide functionality not natively supported on SSJS*/\n  Platform.Function.ContentBlockByKey(\"{{mcpm#/entities/assets/1397379/data/customerKey}}\");\n  \n  /*Initialize WSProxy*/\n  var prox = new Script.Util.WSProxy();\n  \n  /* Set as true for filtering out inactive automations */\n  var includeOnlyActiveAuto=false;\n  \n  /* Set SSJS Activity Name for error log data extension filling */\n  var SSJSActivityName = \"SC_AUTOMATION_INVENTORY\";\n  \n  /* Set values delimited by comma for filtering out automations/activities by keyword */\n  var targetValues = [\"Customer_Data\", \"Contact_Salesforce\"];\n  \n  /* Automation Inventory target data extension name */\n  var inventoryDataExtension = \"DE_AUTOMATION_INVENTORY\";\n  \n  /* Error log data extension name */\n  var errorLogDataExtension = \"DE_AUTOMATION_INVENTORY_ERROR_LOG\";\n  \n  var businessUnitName = \"BUSINESS UNIT NAME\"\n  \n  /* Helper function that insert errors logged during runtime into error log data extension*/\n  function handleError(error, errorSource) {\n    Platform.Function.InsertData(\n      errorLogDataExtension,\n      ['id', 'errorSource', 'errorMessage', 'errorDescription', 'activityName'],\n      [Platform.Function.GUID(), errorSource, Stringify(error.message), Stringify(error.description), SSJSActivityName]\n    );\n  };\n  \n  function GetAllAutomations(isOnlyActive) {\n    var filter;\n    try {\n      if (isOnlyActive) {\n        filter = {\n          Property: \"Status\",\n          SimpleOperator: \"IN\",\n          Value: [3, 6, 7] /*All Automations that are Running, Scheduled, or AwaitingTrigger (File Drop automation)*/\n        };\n      } else {\n        filter = {\n          Property: \"Status\",\n          SimpleOperator: \"IN\",\n          Value: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]  /*All Automations*/\n        };\n      }\n\n      var cols1 = [\n        \"ObjectID\", \"Name\", \"Description\", \"Status\", \"Schedule.ID\", \"CustomerKey\", \"Client.ID\", \"IsActive\", \"CreatedDate\", \"Client.CreatedBy\", \"ModifiedDate\", \"Client.ModifiedBy\", \"Client.EnterpriseID\"\n      ];\n      res1 = prox.retrieve(\"Program\", cols1, filter);\n    }\n    catch (e1) {\n      handleError(e1, 'GetAllAutomations');\n    }\n    return res1.Results;\n  }\n  \n  function GetAllActivities(automationObjectId) {\n    try {\n      var filter2 = {\n        Property: \"Program.ObjectID\",\n        SimpleOperator: \"equals\",\n        Value: automationObjectId\n      };\n      var cols2 = [\n        \"ObjectID\", \"Program.ObjectID\", \"Name\", \"Task.ObjectID\", \"Sequence\", \"Description\", \"Definition.ID\", \"Definition.ObjectID\", \"PartnerAPIObjectTypeID\", \"CustomerKey\", \"Client.ID\", \"Definition\", \"IsActive\", \"CreatedDate\", \"Client.CreatedBy\", \"ModifiedDate\", \"Client.ModifiedBy\", \"Client.EnterpriseID\"\n      ];\n      res2 = prox.retrieve(\"Activity\", cols2, filter2);\n    }\n    catch (e2) {\n      handleError(e2, 'GetAllActivities | ' + funcvar2a);\n    }\n    return res2.Results;\n  }\n  \n  function QueryTextSFMGRegExParser(queryText) {\n    var Q = queryText;\n    var Q2 = Q.replace(/\\\\n/g, \" \");\n    var Q3 = Q2.replace(/\\s/g, \" \");\n    var Q4 = Q3.replace(/\\\\r/g, \" \");\n    var DEResult = [];\n    var DESQL = [];\n    var reg = [\n      [\n        /from\\s+ent\\.\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /from\\s+ent\\.\\w+/gi,\n        /from\\s+\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /from\\s+\\w+/gi,\n        /join\\s+ent\\.\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /join\\s+ent\\.\\w+/gi,\n        /join\\s+(?!ent\\.)\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /join\\s+\\w+/gi\n      ],\n      [\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi\n      ]\n    ];\n    for (k = 0; k < reg[0].length; k++) {\n      var DESQL1 = Q4.match(reg[0][k]);\n      var DESQL2 = [];\n      for (l = 0; l < DESQL1.length; l++) {\n        var arraystring = \"\";\n        arraystring = DESQL1[l];\n        var arraystringlength = arraystring.length;\n        if (arraystringlength > 1) {\n          DESQL2[l] = DESQL1[l].replace(reg[1][k], \"\");\n          var ENTstring = \"ent\";\n          var areEqual = DESQL2[l].toUpperCase() === ENTstring.toUpperCase();\n          if (areEqual) {\n          }\n          else {\n            DEResult.push(DESQL2[l]);\n          }\n        }\n      }\n    }\n    return DEResult;\n  }\n  \n  function GetFilterActivityIO(filterActivityName) {\n    try {\n      var filter3 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: filterActivityName\n      };\n      var cols3 = [\n        \"ObjectID\", \"DestinationObjectID\", \"SourceObjectID\", \"Name\", \"Client.ID\", \"CustomerKey\", \"Description\", \"CreatedDate\", \"ModifiedDate\", \"DestinationTypeID\"\n      ];\n      res3 = prox.retrieve(\"FilterActivity\", cols3, filter3);\n    }\n    catch (e3) {\n      handleError(e3, 'GetFilterActivityIO');\n    }\n    var filterinput;\n    var filteroutput;\n    if (SourceTypeID == 1) {\n      filterinput = GetListName(res3.Results[0].SourceObjectID);\n    }\n    if (DestinationTypeID == 1) {\n      filteroutput = GetListName(res3.Results[0].DestinationObjectID);\n    }\n    if (SourceTypeID == 2) {\n      filterinput = GetDEName(res3.Results[0].SourceObjectID);\n    }\n    if (DestinationTypeID == 2) {\n      filteroutput = GetDEName(res3.Results[0].DestinationObjectID);\n    }\n    res3.Results[0].input = filterinput;\n    res3.Results[0].output = filteroutput;\n    return res3.Results[0];\n  }\n  \n  function GetQueryDefinitionIO(queryActivityName) {\n    try {\n      var filter4 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: queryActivityName\n      };\n      var cols4 = [\n        \"ObjectID\", \"Client.ID\", \"Name\", \"CustomerKey\", \"Description\", \"QueryText\", \"TargetType\", \"DataExtensionTarget.Name\", \"DataExtensionTarget.CustomerKey\", \"DataExtensionTarget.Description\", \"TargetUpdateType\", \"FileType\", \"FileSpec\", \"Status\", \"CreatedDate\", \"ModifiedDate\", \"CategoryID\"\n      ];\n      res4 = prox.retrieve(\"QueryDefinition\", cols4, filter4);\n    }\n    catch (e4) {\n      handleError(e4, 'GetQueryDefinitionIO');\n    }\n    \n    if (res4.Results.length > 0) {\n      var DESQL = QueryTextSFMGRegExParser(res4.Results[0].QueryText);\n      res4.Results[0].input = [];\n      var o = 0;\n      var inputlength = DESQL.length;\n      while (o < inputlength) {\n        var firstcharblank = DESQL[o].substring(0, 1);\n        res4.Results[0].input.push(DESQL[o]);\n        o++;\n      }\n    }\n    res4.Results[0].output = res4.Results[0].DataExtensionTarget.Name;\n    return res4.Results[0];\n  }\n  \n  function GetImportDefinitionIO(importActivityName) {\n    var importoutput = \"\";\n    try {\n      var filter5 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: importActivityName\n      };\n      var cols5 = [\n        \"ObjectID\", \"PartnerKey\", \"Client.ClientID1\", \"Name\", \"CustomerKey\", \"Description\", \"FileSpec\", \"AllowErrors\", \"FieldMappingType\", \"FileType\", \"UpdateType\", \"MaxFileAge\", \"MaxFileAgeScheduleOffset\", \"MaxImportFrequency\", \"DestinationObject.ObjectID\", \"DestinationObject.ID\", \"DestinationType\", \"Notification.ResponseType\", \"Notification.ResponseAddress\", \"RetrieveFileTransferLocation.ObjectID\", \"Delimiter\", \"HeaderLines\", \"EndOfLineRepresentation\", \"NullRepresentation\", \"StandardQuotedStrings\", \"DateFormattingLocale.LocaleCode\"\n      ];\n      res5 = prox.retrieve(\"ImportDefinition\", cols5, filter5);\n      if (res5.Results[0].DestinationType == 0) {\n        importoutput = GetDEName(res5.Results[0].DestinationObject.ObjectID);\n      }\n      if (importoutput == null) {\n        importoutput = GetListName(res5.Results[0].DestinationObject.ID);\n        if (typeof importoutput === \"object\" && importoutput !== null) {\n          importoutput = importoutput.concat(\" (List)\");\n        }\n      }\n      var concatFTPfile = res5.Results[0].FileSpec;\n      if (typeof concatFTPfile === \"object\" && concatFTPfile !== null) {\n        concatFTPfile = concatFTPfile.concat(\" (FTP File or Salesforce Import)\");\n      }\n      res5.Results[0].input = concatFTPfile;\n      res5.Results[0].output = importoutput;\n    }\n    catch (e5) {\n      handleError(e5, 'GetImportDefinitionIO');\n    }\n    return res5.Results[0];\n  }\n  \n  function GetDEName(dataExtensionObjectId) {\n    try {\n      var filter6 = {\n        Property: \"ObjectID\",\n        SimpleOperator: \"equals\",\n        Value: dataExtensionObjectId\n      };\n      var cols6 = [\n        \"ObjectID\", \"Name\"\n      ];\n      res6 = prox.retrieve(\"DataExtension\", cols6, filter6);\n    }\n    catch (e6) {\n      handleError(e6, 'GetDEName');\n    }\n    return res6.Results[0].Name;\n  }\n  function GetListName(funcvar7a) {\n    var res7 = List.Retrieve({\n      Property: \"ID\", SimpleOperator: \"equals\", Value: funcvar7a\n    }\n                            );\n    return res7[0].ListName;\n  }\n  \n  /* Transverse the provided object and its nested objects/arrays checking for provided target values */\n  function ContainsTargetValues(obj, targets) {\n    try {\n      if (!obj) {\n        return false;\n      }\n      if (typeof obj === \"string\") {\n        for (var i = 0; i < targets.length; i++) {\n          if (obj.indexOf(targets[i]) !== -1) {\n            return true;\n          }\n        }\n      }\n      if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n          if (ContainsTargetValues(obj[i], targets)) {\n            return true;\n          }\n        }\n      }\n      if (typeof obj === \"object\" && obj !== null) {\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            if (ContainsTargetValues(obj[key], targets)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n    catch (e) {\n      handleError(e, 'ContainsTargetValues');\n    }\n  }\n  \n/* Iterate through the array of automations and its nested activities, enhance activity details, check whether the targetValues are contained, filter out unintended automations and insert a row for each set of automation/activity */\n  try {\n    var autoresult = GetAllAutomations(includeOnlyActiveAuto);\n    var numberofauto = autoresult.length;\n    var listofauto = [];\n    var i = 0;\n    while (i < numberofauto) {\n      var automation = autoresult[i];\n      listofauto.push(automation.ObjectID);\n      if (!listofauto[i] || typeof listofauto[i] === \"undefined\") {\n        i++;\n        continue;\n      }\n      var Activities = GetAllActivities(listofauto[i]);\n      var numberofactivities = Activities.length;\n      var j = 0;\n      automation.RelatedActivities = [];\n      var hasMatchingActivity = false;\n      while (j < numberofactivities) {\n        var activity = Activities[j];\n        var FilterActivity = GetFilterActivityIO(activity.Name);\n        if (FilterActivity.Name.length > 0) {\n          activity.input = [];\n          activity.input.push(FilterActivity.input);\n          activity.output = FilterActivity.output;\n          activity.automationtype = \"Filter Definition\";\n        }\n        var QueryDefinition = GetQueryDefinitionIO(activity.Name);\n        if (QueryDefinition.Name.length > 0) {\n          activity.input = [];\n          activity.input = QueryDefinition.input;\n          activity.output = QueryDefinition.output;\n          activity.QueryText = QueryDefinition.QueryText;\n          activity.automationtype = \"Query Definition\";\n        }\n        var ImportDefinition = GetImportDefinitionIO(activity.Name);\n        if (ImportDefinition.Name.length > 0) {\n          activity.input = [];\n          activity.input.push(ImportDefinition.input);\n          activity.output = ImportDefinition.output;\n          activity.automationtype = \"Import Definition\";\n        }\n        var isTargetActivity = ContainsTargetValues(activity, targetValues);\n        if (isTargetActivity) {\n          hasMatchingActivity = true;\n        }\n        automation.RelatedActivities.push(activity);\n        j++;\n      }\n      if (!hasMatchingActivity) {\n        i++;\n        continue;\n      }\n      for (var l = 0; l < automation.RelatedActivities.length; l++) {\n        var activity = automation.RelatedActivities[l];\n        Platform.Function.InsertData(\n          inventoryDataExtension,\n          [\n            'AutomationName',\n            'Status',\n            'CreatedDate',\n            'ModifiedDate',\n            'ScheduledTime',\n            'ActivityName',\n            'ActivityType',\n            'ActivityInput',\n            'ActivityOutput',\n            'QueryText',\n            'DERowId',\n            'BusinessUnit'\n          ],\n          [\n            automation.Name,\n            automation.Status,\n            automation.CreatedDate,\n            automation.ModifiedDate,\n            automation.ScheduledTime || \"\",\n            activity.Name,\n            activity.automationtype || \"Other\",\n            activity.input ? activity.input.join(\", \") : \"\",\n            activity.output || \"\",\n            activity.QueryText || \"\",\n            Platform.Function.GUID(),\n            businessUnitName\n          ]\n        );\n      }\n      i++;\n    }\n  }\n  catch (e) {\n    handleError(e, 'Data Prep + DE Insertion');\n  }\n</script><script runat=\"server\">\n  \n  Platform.Load(\"Core\", \"1.1.1\");\n  \n  /* Import JS polyfill piece of code to provide functionality not natively supported on SSJS*/\n  Platform.Function.ContentBlockByKey(\"{{mcpm#/entities/assets/1397379/data/customerKey}}\");\n  \n  /*Security Headers*/\n  Platform.Response.SetResponseHeader(\"Strict-Transport-Security\",\"max-age=1000\");\n  Platform.Response.SetResponseHeader(\"X-XSS-Protection\",\"1; mode=block\");\n  Platform.Response.SetResponseHeader(\"X-Frame-Options\",\"Deny\");\n  Platform.Response.SetResponseHeader(\"X-Content-Type-Options\",\"nosniff\");\n  Platform.Response.SetResponseHeader(\"Referrer-Policy\",\"strict-origin-when-cross-origin\");\n  Platform.Response.SetResponseHeader(\"Content-Security-Policy\",\"default-src 'self'\");\n  \n  /*Initialize WSProxy*/\n  var prox = new Script.Util.WSProxy();\n  \n  /* Set as true for filtering out inactive automations */\n  var includeOnlyActiveAuto=false;\n  \n  /* Set SSJS Activity Name for error log data extension filling */\n  var SSJSActivityName = \"SC_CMM_AUTOMATION_INVENTORY\";\n  \n  /* Set values delimited by comma for filtering out automations/activities by keyword */\n  var targetValues = [\"Contact_History\"];\n  \n  /* Automation Inventory target data extension name */\n  var inventoryDataExtension = \"ENT.DE_CONTACT_HISTORY_AUTOMATION_INVENTORY\";\n  \n  /* Error log data extension name */\n  var errorLogDataExtension = \"DE_SSJS_ERROR_LOG\";\n  \n  var businessUnitName = \"IHG Transactional\"\n  \n  /* Helper function that insert errors logged during runtime into error log data extension*/\n  function handleError(error, errorSource) {\n    Platform.Function.InsertData(\n      errorLogDataExtension,\n      ['id', 'errorSource', 'errorMessage', 'errorDescription', 'activityName'],\n      [Platform.Function.GUID(), errorSource, Stringify(error.message), Stringify(error.description), SSJSActivityName]\n    );\n  };\n  \n  function GetAllAutomations(isOnlyActive) {\n    var filter;\n    try {\n      if (isOnlyActive) {\n        filter = {\n          Property: \"Status\",\n          SimpleOperator: \"IN\",\n          Value: [3, 6, 7] /*All Automations that are Running, Scheduled, or AwaitingTrigger (File Drop automation)*/\n        };\n      } else {\n        filter = {\n          Property: \"Status\",\n          SimpleOperator: \"IN\",\n          Value: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]  /*All Automations*/\n        };\n      }\n\n      var cols1 = [\n        \"ObjectID\", \"Name\", \"Description\", \"Status\", \"Schedule.ID\", \"CustomerKey\", \"Client.ID\", \"IsActive\", \"CreatedDate\", \"Client.CreatedBy\", \"ModifiedDate\", \"Client.ModifiedBy\", \"Client.EnterpriseID\"\n      ];\n      res1 = prox.retrieve(\"Program\", cols1, filter);\n    }\n    catch (e1) {\n      handleError(e1, 'GetAllAutomations');\n    }\n    return res1.Results;\n  }\n  \n  function GetAllActivities(automationObjectId) {\n    try {\n      var filter2 = {\n        Property: \"Program.ObjectID\",\n        SimpleOperator: \"equals\",\n        Value: automationObjectId\n      };\n      var cols2 = [\n        \"ObjectID\", \"Program.ObjectID\", \"Name\", \"Task.ObjectID\", \"Sequence\", \"Description\", \"Definition.ID\", \"Definition.ObjectID\", \"PartnerAPIObjectTypeID\", \"CustomerKey\", \"Client.ID\", \"Definition\", \"IsActive\", \"CreatedDate\", \"Client.CreatedBy\", \"ModifiedDate\", \"Client.ModifiedBy\", \"Client.EnterpriseID\"\n      ];\n      res2 = prox.retrieve(\"Activity\", cols2, filter2);\n    }\n    catch (e2) {\n      handleError(e2, 'GetAllActivities | ' + funcvar2a);\n    }\n    return res2.Results;\n  }\n  \n  function QueryTextSFMGRegExParser(queryText) {\n    var Q = queryText;\n    var Q2 = Q.replace(/\\\\n/g, \" \");\n    var Q3 = Q2.replace(/\\s/g, \" \");\n    var Q4 = Q3.replace(/\\\\r/g, \" \");\n    var DEResult = [];\n    var DESQL = [];\n    var reg = [\n      [\n        /from\\s+ent\\.\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /from\\s+ent\\.\\w+/gi,\n        /from\\s+\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /from\\s+\\w+/gi,\n        /join\\s+ent\\.\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /join\\s+ent\\.\\w+/gi,\n        /join\\s+(?!ent\\.)\\[[a-zA-Z0-9_ ]*\\]/gi,\n        /join\\s+\\w+/gi\n      ],\n      [\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /from\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi,\n        /join\\s+/gi\n      ]\n    ];\n    for (k = 0; k < reg[0].length; k++) {\n      var DESQL1 = Q4.match(reg[0][k]);\n      var DESQL2 = [];\n      for (l = 0; l < DESQL1.length; l++) {\n        var arraystring = \"\";\n        arraystring = DESQL1[l];\n        var arraystringlength = arraystring.length;\n        if (arraystringlength > 1) {\n          DESQL2[l] = DESQL1[l].replace(reg[1][k], \"\");\n          var ENTstring = \"ent\";\n          var areEqual = DESQL2[l].toUpperCase() === ENTstring.toUpperCase();\n          if (areEqual) {\n          }\n          else {\n            DEResult.push(DESQL2[l]);\n          }\n        }\n      }\n    }\n    return DEResult;\n  }\n  \n  function GetFilterActivityIO(filterActivityName) {\n    try {\n      var filter3 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: filterActivityName\n      };\n      var cols3 = [\n        \"ObjectID\", \"DestinationObjectID\", \"SourceObjectID\", \"Name\", \"Client.ID\", \"CustomerKey\", \"Description\", \"CreatedDate\", \"ModifiedDate\", \"DestinationTypeID\"\n      ];\n      res3 = prox.retrieve(\"FilterActivity\", cols3, filter3);\n    }\n    catch (e3) {\n      handleError(e3, 'GetFilterActivityIO');\n    }\n    var filterinput;\n    var filteroutput;\n    if (SourceTypeID == 1) {\n      filterinput = GetListName(res3.Results[0].SourceObjectID);\n    }\n    if (DestinationTypeID == 1) {\n      filteroutput = GetListName(res3.Results[0].DestinationObjectID);\n    }\n    if (SourceTypeID == 2) {\n      filterinput = GetDEName(res3.Results[0].SourceObjectID);\n    }\n    if (DestinationTypeID == 2) {\n      filteroutput = GetDEName(res3.Results[0].DestinationObjectID);\n    }\n    res3.Results[0].input = filterinput;\n    res3.Results[0].output = filteroutput;\n    return res3.Results[0];\n  }\n  \n  function GetQueryDefinitionIO(queryActivityName) {\n    try {\n      var filter4 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: queryActivityName\n      };\n      var cols4 = [\n        \"ObjectID\", \"Client.ID\", \"Name\", \"CustomerKey\", \"Description\", \"QueryText\", \"TargetType\", \"DataExtensionTarget.Name\", \"DataExtensionTarget.CustomerKey\", \"DataExtensionTarget.Description\", \"TargetUpdateType\", \"FileType\", \"FileSpec\", \"Status\", \"CreatedDate\", \"ModifiedDate\", \"CategoryID\"\n      ];\n      res4 = prox.retrieve(\"QueryDefinition\", cols4, filter4);\n    }\n    catch (e4) {\n      handleError(e4, 'GetQueryDefinitionIO');\n    }\n    \n    if (res4.Results.length > 0) {\n      var DESQL = QueryTextSFMGRegExParser(res4.Results[0].QueryText);\n      res4.Results[0].input = [];\n      var o = 0;\n      var inputlength = DESQL.length;\n      while (o < inputlength) {\n        var firstcharblank = DESQL[o].substring(0, 1);\n        res4.Results[0].input.push(DESQL[o]);\n        o++;\n      }\n    }\n    res4.Results[0].output = res4.Results[0].DataExtensionTarget.Name;\n    return res4.Results[0];\n  }\n  \n  function GetImportDefinitionIO(importActivityName) {\n    var importoutput = \"\";\n    try {\n      var filter5 = {\n        Property: \"Name\",\n        SimpleOperator: \"equals\",\n        Value: importActivityName\n      };\n      var cols5 = [\n        \"ObjectID\", \"PartnerKey\", \"Client.ClientID1\", \"Name\", \"CustomerKey\", \"Description\", \"FileSpec\", \"AllowErrors\", \"FieldMappingType\", \"FileType\", \"UpdateType\", \"MaxFileAge\", \"MaxFileAgeScheduleOffset\", \"MaxImportFrequency\", \"DestinationObject.ObjectID\", \"DestinationObject.ID\", \"DestinationType\", \"Notification.ResponseType\", \"Notification.ResponseAddress\", \"RetrieveFileTransferLocation.ObjectID\", \"Delimiter\", \"HeaderLines\", \"EndOfLineRepresentation\", \"NullRepresentation\", \"StandardQuotedStrings\", \"DateFormattingLocale.LocaleCode\"\n      ];\n      res5 = prox.retrieve(\"ImportDefinition\", cols5, filter5);\n      if (res5.Results[0].DestinationType == 0) {\n        importoutput = GetDEName(res5.Results[0].DestinationObject.ObjectID);\n      }\n      if (importoutput == null) {\n        importoutput = GetListName(res5.Results[0].DestinationObject.ID);\n        if (typeof importoutput === \"object\" && importoutput !== null) {\n          importoutput = importoutput.concat(\" (List)\");\n        }\n      }\n      var concatFTPfile = res5.Results[0].FileSpec;\n      if (typeof concatFTPfile === \"object\" && concatFTPfile !== null) {\n        concatFTPfile = concatFTPfile.concat(\" (FTP File or Salesforce Import)\");\n      }\n      res5.Results[0].input = concatFTPfile;\n      res5.Results[0].output = importoutput;\n    }\n    catch (e5) {\n      handleError(e5, 'GetImportDefinitionIO');\n    }\n    return res5.Results[0];\n  }\n  \n  function GetDEName(dataExtensionObjectId) {\n    try {\n      var filter6 = {\n        Property: \"ObjectID\",\n        SimpleOperator: \"equals\",\n        Value: dataExtensionObjectId\n      };\n      var cols6 = [\n        \"ObjectID\", \"Name\"\n      ];\n      res6 = prox.retrieve(\"DataExtension\", cols6, filter6);\n    }\n    catch (e6) {\n      handleError(e6, 'GetDEName');\n    }\n    return res6.Results[0].Name;\n  }\n  function GetListName(funcvar7a) {\n    var res7 = List.Retrieve({\n      Property: \"ID\", SimpleOperator: \"equals\", Value: funcvar7a\n    }\n                            );\n    return res7[0].ListName;\n  }\n  \n  /* Transverse the provided object and its nested objects/arrays checking for provided target values */\n  function ContainsTargetValues(obj, targets) {\n    try {\n      if (!obj) {\n        return false;\n      }\n      if (typeof obj === \"string\") {\n        for (var i = 0; i < targets.length; i++) {\n          if (obj.indexOf(targets[i]) !== -1) {\n            return true;\n          }\n        }\n      }\n      if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n          if (ContainsTargetValues(obj[i], targets)) {\n            return true;\n          }\n        }\n      }\n      if (typeof obj === \"object\" && obj !== null) {\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            if (ContainsTargetValues(obj[key], targets)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n    catch (e) {\n      handleError(e, 'ContainsTargetValues');\n    }\n  }\n  \n/* Iterate through the array of automations and its nested activities, enhance activity details, check whether the targetValues are contained, filter out unintended automations and insert a row for each set of automation/activity */\n  try {\n    var autoresult = GetAllAutomations(includeOnlyActiveAuto);\n    var numberofauto = autoresult.length;\n    var listofauto = [];\n    var i = 0;\n    while (i < numberofauto) {\n      var automation = autoresult[i];\n      listofauto.push(automation.ObjectID);\n      if (!listofauto[i] || typeof listofauto[i] === \"undefined\") {\n        i++;\n        continue;\n      }\n      var Activities = GetAllActivities(listofauto[i]);\n      var numberofactivities = Activities.length;\n      var j = 0;\n      automation.RelatedActivities = [];\n      var hasMatchingActivity = false;\n      while (j < numberofactivities) {\n        var activity = Activities[j];\n        var FilterActivity = GetFilterActivityIO(activity.Name);\n        if (FilterActivity.Name.length > 0) {\n          activity.input = [];\n          activity.input.push(FilterActivity.input);\n          activity.output = FilterActivity.output;\n          activity.automationtype = \"Filter Definition\";\n        }\n        var QueryDefinition = GetQueryDefinitionIO(activity.Name);\n        if (QueryDefinition.Name.length > 0) {\n          activity.input = [];\n          activity.input = QueryDefinition.input;\n          activity.output = QueryDefinition.output;\n          activity.QueryText = QueryDefinition.QueryText;\n          activity.automationtype = \"Query Definition\";\n        }\n        var ImportDefinition = GetImportDefinitionIO(activity.Name);\n        if (ImportDefinition.Name.length > 0) {\n          activity.input = [];\n          activity.input.push(ImportDefinition.input);\n          activity.output = ImportDefinition.output;\n          activity.automationtype = \"Import Definition\";\n        }\n        var isTargetActivity = ContainsTargetValues(activity, targetValues);\n        if (isTargetActivity) {\n          hasMatchingActivity = true;\n        }\n        automation.RelatedActivities.push(activity);\n        j++;\n      }\n      if (!hasMatchingActivity) {\n        i++;\n        continue;\n      }\n      for (var l = 0; l < automation.RelatedActivities.length; l++) {\n        var activity = automation.RelatedActivities[l];\n        Platform.Function.InsertData(\n          inventoryDataExtension,\n          [\n            'AutomationName',\n            'Status',\n            'CreatedDate',\n            'ModifiedDate',\n            'ScheduledTime',\n            'ActivityName',\n            'ActivityType',\n            'ActivityInput',\n            'ActivityOutput',\n            'QueryText',\n            'DERowId',\n            'BusinessUnit'\n          ],\n          [\n            automation.Name,\n            automation.Status,\n            automation.CreatedDate,\n            automation.ModifiedDate,\n            automation.ScheduledTime || \"\",\n            activity.Name,\n            activity.automationtype || \"Other\",\n            activity.input ? activity.input.join(\", \") : \"\",\n            activity.output || \"\",\n            activity.QueryText || \"\",\n            Platform.Function.GUID(),\n            businessUnitName\n          ]\n        );\n      }\n      i++;\n    }\n  }\n  catch (e) {\n    handleError(e, 'Data Prep + DE Insertion');\n  }\n</script>",
                    "categoryId": "{{mcpm#/entities/categories/450781/data/id}}",
                    "description": ""
                }
            }
        },
        "sendDefinitions": {},
        "sharedDataExtensions": {},
        "siteMapVersions": {},
        "subscriberLists": {},
        "verificationActivities": {}
    },
    "selectedEntities": {
        "assets": [
            1397379
        ],
        "attributeGroups": [],
        "automations": [
            "6bfbaecf-44a4-4b3b-8d9c-f03b9a63df67"
        ],
        "cloudPageCollections": [],
        "dataExtensions": [
            "25137f26-5d0e-f011-b868-48df37deb2e3",
            "24137f26-5d0e-f011-b868-48df37deb2e3"
        ],
        "journeys": [],
        "journeyTemplates": [],
        "sharedDataExtensions": []
    }
}
